      // ✅ Function to handle Sign Up
  const handleSignUp = async () => {
    if (!email || !password || !firstName || !lastName || !phone) {
      Alert.alert("Error", "All fields are required");
      return;
    }

    try {
      // ✅ Create user with Firebase Auth
      const userCredential = await auth().createUserWithEmailAndPassword(email, password);
      const { uid } = userCredential.user;

      // ✅ Save additional user info to Realtime DB
      await database().ref(`/users/${uid}`).set({
        firstName,
        lastName,
        email,
        phone,
        createdAt: new Date().toISOString(),
      });

      Alert.alert("Success", "Account created successfully!");
      navigation.navigate("Login");

    } catch (error) {
      Alert.alert("Registration Failed", error.message);
      console.error(error);
    }
  };









  --------------pest--------------------
  import { Colors } from "@/constants/Colors";
import React, {useState} from "react";
import { View, Text, TouchableOpacity, SafeAreaView, Image, StyleSheet, Button } from "react-native";
import * as ImagePicker from "expo-image-picker";

const Pest = () => {
    const [image, setImage] = useState(null);
  
    // Function to open the camera
    const takePicture = async () => {
      // Request camera permissions
      const { status } = await ImagePicker.requestCameraPermissionsAsync();
      if (status !== "granted") {
        Alert.alert("Permission Required", "Camera access is needed to take a picture.");
        return;
      }
       // Launch the camera
       let result = await ImagePicker.launchCameraAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [4, 3],
        quality: 1,
      });
  
      if (!result.canceled) {
        setImage(result.assets[0].uri); // Save the captured image URI
      }
    };
  
    const pickImage = async () => {
      // Ask for permission to access media library
      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (status !== "granted") {
        Alert.alert("Permission Required", "Media library access is needed to upload an image.");
        return;
      }
    
      let result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTpe.IMAGE,
        allowsEditing: true,
        aspect: [4, 3],
        quality: 1,
      });
    
      if (!result.canceled) {
        setImage(result.assets[0].uri); // Save the selected image URI
      }
    };
  

  return (
    <SafeAreaView style={{ flex: 1, }}>
    <View style={{ flex: 1,backgroundColor: Colors.white }}>

      {/* Heal Your Crop Section */}
      <View style={{  marginTop: 20,padding: 15}} >
        <Text style={styles.healText}>Heal your Crop</Text>
        <View style={styles.healSection}>
          <View style={{flexDirection: "row", justifyContent: "space-around", alignItems: 'center'}}>
          <View style={styles.iconBox}>
          <Image source={require('../app/assets/Image.png')}  />
            {/* <Icon icon="mdi:camera" width={30} height={30} /> */}
            <Text>Take a picture</Text>
          </View>
          <Image source={require('../app/assets/Arrow.png')}  />
          <View style={styles.iconBox}>
            {/* <Icon icon="mdi:clipboard-check" width={30} height={30} /> */}
            <Image source={require("../app/assets/Result.png")} />
            <Text>See diagnosis</Text>
          </View>
          <Image source={require('../app/assets/Arrow.png')}  />
          <View style={styles.iconBox}>
          <Image source={require('../app/assets/Bottle.png')}  />
            {/* <Icon icon="mdi:bottle-tonic" width={30} height={30} /> */}
            <Text>Get Solution</Text>

            
          </View>
          </View>
          <TouchableOpacity style={styles.takePictureButton} onPress={takePicture}>
          <Text style={{ color:Colors.white, fontSize: 16, fontWeight:"500"}}>Take a picture</Text>
          
        </TouchableOpacity>
        <Text  onPress={pickImage} style={{ color: Colors.primary,fontSize: 12, fontWeight:"500", textAlign: "center", marginTop: 5}}>Upload from gallery</Text>
        {/* Show the captured image */}
        {image && <Image source={{ uri: image }} style={styles.imagePreview} />}
        {/* <Button title="Upload from Gallery" onPress={pickImage} /> */}
        </View>

       
      </View>

    </View>
   </SafeAreaView>
  )
}

const styles= StyleSheet.create ({
    logoContainer: {
      paddingTop: 30,
      paddingLeft: 20,
    },
    topContainer:{
      flexDirection: "row", 
      justifyContent: "space-between", 
      backgroundColor: Colors.primary,
      padding: 15, 
      paddingVertical: 40,
      // height: 200, 
      borderTopEndRadius: 20, 
      borderTopStartRadius: 20 
    },
    topText: {
      fontSize: 16,
    },
    menuItem: {
      alignItems: "start",
      backgroundColor: Colors.ash2,
      padding: 10,
      borderRadius: 10,
      width: 100,
    },
    iconWrapper: {
      backgroundColor: Colors.ash1,
      padding: 10,
      height: 40,
      width: 40,
      alignItems: 'center',
      justifyContent: 'center',
      borderRadius: "50%",
  
    },
    healSection: {
      backgroundColor: Colors.ash2,
      borderRadius: 10,
      padding: 20,
    },
    healText: {
      fontSize: 16,
      // fontWeight: "bold",
      marginBottom: 10,
    },
    iconBox: {
      alignItems: "center",
      margin: 10,
    },
    takePictureButton: {
      marginTop: 10, 
      backgroundColor: Colors.secondary,
      padding: 10,
      borderRadius: 25,
      alignItems: "center",
    },
    imagePreview: {
      marginTop: 10,
      width: "100%",
      height: 200,
      borderRadius: 10,
    }

  });

export default Pest







---------------------------------pest sub-----------------------------
//   const saveImageUrlToFirebase = async (url) => {
//     const user = auth.currentUser;
//     if (!user) return;
//     const imageRef = ref(database, "users/" + user.uid + "/pestImage");
//     await set(imageRef, {
//       imageUrl: url,
//       uploadedAt: new Date().toISOString(),
//     });
//   };

//   const handleImage = async (result) => {
//     if (!result.canceled) {
//       const imageUri = result.assets[0].uri;
//       console.log("Selected image URI:", imageUri);
//       setImage(imageUri);
//       setUploading(true);

//       const cloudinaryUrl = await uploadImageToCloudinary(imageUri);
//       if (cloudinaryUrl) {
//         await saveImageUrlToFirebase(cloudinaryUrl);
//         Alert.alert("Success", "Image uploaded and saved!");
//       } else {
//         Alert.alert("Upload Failed", "Could not upload image.");
//       }

//       setUploading(false);
//     }
//   };






--------------pevvious saveImageUrlToFirebase------------------

const saveImageUrlToFirebase = async (url, detectedClass) => {
    const user = auth.currentUser;
    if (!user) return;
    const imageRef = ref(database, "users/" + user.uid + "/pestImage");
    await set(imageRef, {
      imageUrl: url,
      uploadedAt: new Date().toISOString(),
      diagnosis: detectedClass || "Unknown", // <-- NEW: save detection result
    });
  };